/*
 * This file was generated by the Gradle 'init' task.
 */
plugins {
    id 'java'
    id 'application'
    id 'maven-publish'
}

mainClassName = "amidst.Amidst"
group = 'amidst'
version = '4.6'
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenLocal()
    maven {
        url 'https://jitpack.io'
    }

    maven {
        url 'https://maven.fabricmc.net'
    }

    maven {
        url 'https://libraries.minecraft.net'
    }

    maven {
        url 'https://repo.maven.apache.org/maven2'
    }
}

dependencies {
    implementation 'com.google.code.gson:gson:2.5'
    implementation 'com.miglayout:miglayout-swing:4.2'
    implementation 'args4j:args4j:2.32'
    implementation 'com.github.Querz:NBT:5.5'
    implementation 'com.github.KaptainWutax:SeedUtils:master-SNAPSHOT'
    testImplementation 'junit:junit:4.11'
    compileOnly 'org.codehaus.mojo:properties-maven-plugin:1.0.0'
    // fabric
    implementation "net.fabricmc:fabric-loader:0.9.0+build.204"
    implementation "net.fabricmc:sponge-mixin:0.8.1+build.20"
    implementation "net.fabricmc:fabric-loader-sat4j:2.3.5.4"
    implementation "net.fabricmc:tiny-mappings-parser:0.2.2.14"
    implementation "net.fabricmc:tiny-remapper:0.3.0.70"
    // etc
    implementation "com.googlecode.json-simple:json-simple:1.1.1"
    implementation "org.apache.logging.log4j:log4j-core:2.13.3"
    implementation "com.google.jimfs:jimfs:1.1"
    implementation "com.github.classgraph:classgraph:classgraph-4.8.88"
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    manifest {
        attributes  'Main-Class': "$mainClassName"
    }
    destinationDir new File("dist/artifact/")
    archiveName "amidst-v${version}.jar"
    dependsOn configurations.runtime
    from {
        "LICENSE"
        configurations.runtimeClasspath.collect {it.isDirectory()? it: zipTree(it)}
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
}

/*
publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}
*/